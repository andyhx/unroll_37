#!/usr/bin/env python
import numpy as np
import timeit
from time import clock
import sys,os
caffe_root='/home/scw4750/github/unrolling'
import os
os.chdir(caffe_root)
import sys
sys.path.insert(0, 'python')

import caffe
caffe.set_device(0)
caffe.set_mode_gpu()

from google.protobuf import text_format
from caffe.proto import caffe_pb2

#load net and do preproccessing
model_weights = '/home/scw4750/github/unrolling/zero/A_net/A_net_by_frontal/0_frontal_layer/frontal.caffemodel'
model_def='/home/scw4750/github/unrolling/zero/A_net/A_net_by_frontal/0_frontal_layer/frontal_layer_test/deploy_test_backward.prototxt'
net = caffe.Net(model_def,      # defines the structure of the model
                model_weights,  # contains the trained weights
                caffe.TEST)     # use test mode (e.g., don't perform dropout)

# input preprocessing: 'data' is the name of the input blob == net.inputs[0]
image_resize=100
image_num=1
#net.blobs['image'].reshape(image_num,3,image_resize,image_resize)
#print net.blobs['data'].data.shape
#transformer = caffe.io.Transformer({'image': net.blobs['image'].data.shape})
#transformer.set_transpose('image', (2, 0, 1))
#transformer.set_mean('image', np.array([0.5])) # mean pixel
#transformer.set_raw_scale('data', 128)  # the reference model operates on images in [0,255] range instead of [0,1]
#transformer.set_channel_swap('data', (2,1,0))  # the reference model has channels in BGR order instead of RGB


import cv2
from cv2 import cv
import os
import imghdr
import re
import numpy as np
print "ok"


if 1==1:
		frame=cv2.imread('/home/scw4750/github/a_net/test.jpg',0)
		para=[-0.679925,-0.271923,-0.654499,0.513835,-1.310936,0.057552,-0.653901,-0.629030,-0.287085,-0.789529,1.112635,-0.418842,0.180551,0.481623,-0.979417,0.919742,-0.402628,0.067596,-0.184007,0.682155,0.702704,-0.434395,-0.084802,-0.538564,0.356005,-1.377858,0.925565,-0.251378,-1.063643,-0.794751,-0.347077,0.157753,0.349083,1.184292,0.546329,-0.231224,0.029442,1.310678,-0.590589,0.276211,0.186075,0.972393,-0.397573,-0.213151,-1.260561,-0.598570,-0.244529,-1.413629,-0.081471,-0.771468,-0.574325,1.814785,0.604256,0.081331,-3.930089,-0.567641,-0.209676,1.826738,-0.343627,0.907156,-0.607627,0.053713,0.315694,-0.661275,1.618546,0.137786,0.933320,-1.461525,-0.393774,0.582667,0.136811,1.244369,-0.007379,1.353925,0.198563,-0.179801,-0.769440,-0.152043,0.540541,-0.056096,-0.033569,0.537811,1.107230,-0.252307,-0.937082,-0.710867,-0.831247,0.879824,-0.122358,0.447566,-0.151878,0.447161,-2.063182,-0.832904,-0.506870,0.082363,0.229211,1.112082,0.526508,-0.263768,-0.805482,0.056649,-0.266932,-0.275402,-0.649426,-1.284362,0.656680,-1.036099,-0.454219,0.374347,-0.356115,-0.692200,1.154446,1.170441,-1.258590,0.526316,0.467110,0.589655,0.606709,0.232437,-0.792279,1.008218,1.211266,-1.418008,1.131297,0.342397,-0.430012,-0.212884,-1.066126,-1.078543,2.112059,-1.018647,-0.573599,1.541955,-0.560591,0.659485,0.878977,0.270363,-0.373887,-0.867430,-0.449354,1.619671,-0.629949,0.820614,0.429635,-1.035593,1.193385,-0.442972,-1.025719,1.275537,-0.521072,1.168421,0.546298,-1.213385,-1.509718,-0.540204,1.086244,-0.156711,0.496326,0.929717,0.074468,0.320166,-0.454683,-0.548404,-0.829524,-1.314232,0.932095,-1.249724,-0.482459,0.398590,-0.181341,-0.948005,0.475959,-0.115481,0.974328,0.283892,-1.030133,0.911857,-0.659861,0.326998,0.274540,-1.280858,1.188591,-0.542040,0.665619,-0.911602,-0.104983,-0.598708,-0.123677,0.274629,-0.667453,-0.492723,-0.728863,0.538150,0.618266,0.620238,0.178953,-0.923863,0.627808,0.658760,0.722092,-0.459313,0.611219,0.141023,0.302998,-0.047780,0.147517,-0.803917,0.153953,-0.221812,0.375314,-0.948659,0.267570,-0.044639,-0.033859,-0.188432,0.220568,-0.401021,0.242154,-0.215860,0.273337,-0.379821,0.301146,-0.033858,-0.483569,0.117891,0.248625,0.237307,-0.022762,0.138686,-1.085712,0.834970,-0.572926,0.316915,0.132260,-0.478317]
		para2=[-0.680025,-0.271923,-0.654499,0.513835,-1.310936,0.057552,-0.653901,-0.629030,-0.287085,-0.789529,1.112635,-0.418842,0.180551,0.481623,-0.979417,0.919742,-0.402628,0.067596,-0.184007,0.682155,0.702704,-0.434395,-0.084802,-0.538564,0.356005,-1.377858,0.925565,-0.251378,-1.063643,-0.794751,-0.347077,0.157753,0.349083,1.184292,0.546329,-0.231224,0.029442,1.310678,-0.590589,0.276211,0.186075,0.972393,-0.397573,-0.213151,-1.260561,-0.598570,-0.244529,-1.413629,-0.081471,-0.771468,-0.574325,1.814785,0.604256,0.081331,-3.930089,-0.567641,-0.209676,1.826738,-0.343627,0.907156,-0.607627,0.053713,0.315694,-0.661275,1.618546,0.137786,0.933320,-1.461525,-0.393774,0.582667,0.136811,1.244369,-0.007379,1.353925,0.198563,-0.179801,-0.769440,-0.152043,0.540541,-0.056096,-0.033569,0.537811,1.107230,-0.252307,-0.937082,-0.710867,-0.831247,0.879824,-0.122358,0.447566,-0.151878,0.447161,-2.063182,-0.832904,-0.506870,0.082363,0.229211,1.112082,0.526508,-0.263768,-0.805482,0.056649,-0.266932,-0.275402,-0.649426,-1.284362,0.656680,-1.036099,-0.454219,0.374347,-0.356115,-0.692200,1.154446,1.170441,-1.258590,0.526316,0.467110,0.589655,0.606709,0.232437,-0.792279,1.008218,1.211266,-1.418008,1.131297,0.342397,-0.430012,-0.212884,-1.066126,-1.078543,2.112059,-1.018647,-0.573599,1.541955,-0.560591,0.659485,0.878977,0.270363,-0.373887,-0.867430,-0.449354,1.619671,-0.629949,0.820614,0.429635,-1.035593,1.193385,-0.442972,-1.025719,1.275537,-0.521072,1.168421,0.546298,-1.213385,-1.509718,-0.540204,1.086244,-0.156711,0.496326,0.929717,0.074468,0.320166,-0.454683,-0.548404,-0.829524,-1.314232,0.932095,-1.249724,-0.482459,0.398590,-0.181341,-0.948005,0.475959,-0.115481,0.974328,0.283892,-1.030133,0.911857,-0.659861,0.326998,0.274540,-1.280858,1.188591,-0.542040,0.665619,-0.911602,-0.104983,-0.598708,-0.123677,0.274629,-0.667453,-0.492723,-0.728863,0.538150,0.618266,0.620238,0.178953,-0.923863,0.627808,0.658760,0.722092,-0.459313,0.611219,0.141023,0.302998,-0.047780,0.147517,-0.803917,0.153953,-0.221812,0.375314,-0.948659,0.267570,-0.044639,-0.033859,-0.188432,0.220568,-0.401021,0.242154,-0.215860,0.273337,-0.379821,0.301146,-0.033858,-0.483569,0.117891,0.248625,0.237307,-0.022762,0.138686,-1.085712,0.834970,-0.572926,0.316915,0.132260,-0.478317]
		#para=para2
		frame=(frame-127.5)/128
		#frame=frame.transpose((2,0,1))
		net.blobs['image'].data[0,:] = frame
		net.blobs['pid'].data[:] = para[0:199]
		net.blobs['pexp'].data[:] = para[199:228]
        	net.blobs['pm'].data[:] = para[228:236]

		#true_frontal=cv2.imread('/home/scw4750/github/unrolling/zero/A_net/A_net_by_frontal/0_frontal_layer/frontal_layer_test/true_frontal.jpg',0);
		#net.blobs['true_frontal'].data[0,:]=true_frontal/225.0
		#net.forward()
		net.forward()	

		#isomap =net.blobs['frontal'].data[0,:]*255.0;

		#new_isomap = isomap.transpose((1,2,0)).astype(np.uint8)
		#cv2.imwrite('/home/brl/result.jpg',new_isomap)
		#print isomap.shape
		net.backward();
		#cv2.imshow("isomap1",new_isomap)
		#cv2.waitKey(0)
		#cv2.imwrite("/home/scw4750/github/unrolling/zero/A_net/A_net_by_frontal/0_frontal_layer/frontal_layer_test/true_frontal.jpg",new_isomap)

"""
for file in all_files:
    if file.endswith('jpg'):
		#print file
		frame=cv2.imread(train_image_dir+os.path.sep+file,0)
		print frame.shape
		transformed_image = frame
		net.blobs['image'].data[:] = transformed_image
		para_file=train_image_dir+os.path.sep+file.split('.')[0]+'.txt'
		with open(para_file,'rt') as f:
		  for line in f:
		    para=line.split(' ')
		    para=para[0:len(para)-1]
		    para = [float(i) for i in para]
		    net.blobs['p199'].data[:] = para[0:199]
		    net.blobs['p29'].data[:] = para[199:228]
        	    net.blobs['p8'].data[:] = para[228:236]

		net.forward()

		isomap = net.forward()['unrolling'][0,:]*255.0
		print isomap.shape
		new_isomap = isomap.transpose((1,2,0)).astype(np.uint8)
		#print isomap.shape
		cv2.imshow("isomap1",new_isomap)
		cv2.waitKey(0)
		#cv2.imwrite("/home/brl/haha/a.png",new_isomap)
"""	    	
    


