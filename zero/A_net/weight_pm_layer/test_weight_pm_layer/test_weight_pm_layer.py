#!/usr/bin/env python
import numpy as np
import timeit
from time import clock
import sys,os
#find the directory of the script
def cur_file_dir():
  path = sys.path[0]
  if os.path.isdir(path):
    return path
  elif os.path.isfile(path):
    return os.path.dirname(path)
def cur_file_father_dir():
  father_dir = ''
  cur_file_dir_list = cur_file_dir().split('/')
  for i in range(-len(cur_file_dir_list),-1):
    father_dir += cur_file_dir_list[i] + '/'
  return father_dir


# Make sure that caffe is on the python path:
caffe_root = cur_file_father_dir()  # this file is expected to be in {caffe_root}/examples
import os
os.chdir(caffe_root)
import sys
sys.path.insert(0, 'python')

import caffe
caffe.set_device(0)
caffe.set_mode_gpu()

from google.protobuf import text_format
from caffe.proto import caffe_pb2

#load net and do preproccessing
model_weights = '/home/brl/github/unrolling/zero/test_weight_pm_layer/weight.caffemodel'
model_def='/home/brl/github/unrolling/zero/test_weight_pm_layer/deploy.prototxt'
net = caffe.Net(model_def,      # defines the structure of the model
                model_weights,  # contains the trained weights
                caffe.TEST)     # use test mode (e.g., don't perform dropout)

# input preprocessing: 'data' is the name of the input blob == net.inputs[0]

#net.blobs['image'].reshape(image_num,3,image_resize,image_resize)
#print net.blobs['data'].data.shape
#transformer = caffe.io.Transformer({'image': net.blobs['image'].data.shape})
#transformer.set_transpose('image', (2, 0, 1))
#transformer.set_mean('image', np.array([0.5])) # mean pixel
#transformer.set_raw_scale('data', 128)  # the reference model operates on images in [0,255] range instead of [0,1]
#transformer.set_channel_swap('data', (2,1,0))  # the reference model has channels in BGR order instead of RGB


import cv2
from cv2 import cv
import os
import imghdr
import re
import numpy as np
print "ok"

if 1==1:
		gt_theta=[-0.679925,-0.271923,-0.654499,0.513835,-1.310936,0.057552,-0.653901,-0.629030,-0.287085,-0.789529,1.112635,-0.418842,0.180551,0.481623,-0.979417,0.919742,-0.402628,0.067596,-0.184007,0.682155,0.702704,-0.434395,-0.084802,-0.538564,0.356005,-1.377858,0.925565,-0.251378,-1.063643,-0.794751,-0.347077,0.157753,0.349083,1.184292,0.546329,-0.231224,0.029442,1.310678,-0.590589,0.276211,0.186075,0.972393,-0.397573,-0.213151,-1.260561,-0.598570,-0.244529,-1.413629,-0.081471,-0.771468,-0.574325,1.814785,0.604256,0.081331,-3.930089,-0.567641,-0.209676,1.826738,-0.343627,0.907156,-0.607627,0.053713,0.315694,-0.661275,1.618546,0.137786,0.933320,-1.461525,-0.393774,0.582667,0.136811,1.244369,-0.007379,1.353925,0.198563,-0.179801,-0.769440,-0.152043,0.540541,-0.056096,-0.033569,0.537811,1.107230,-0.252307,-0.937082,-0.710867,-0.831247,0.879824,-0.122358,0.447566,-0.151878,0.447161,-2.063182,-0.832904,-0.506870,0.082363,0.229211,1.112082,0.526508,-0.263768,-0.805482,0.056649,-0.266932,-0.275402,-0.649426,-1.284362,0.656680,-1.036099,-0.454219,0.374347,-0.356115,-0.692200,1.154446,1.170441,-1.258590,0.526316,0.467110,0.589655,0.606709,0.232437,-0.792279,1.008218,1.211266,-1.418008,1.131297,0.342397,-0.430012,-0.212884,-1.066126,-1.078543,2.112059,-1.018647,-0.573599,1.541955,-0.560591,0.659485,0.878977,0.270363,-0.373887,-0.867430,-0.449354,1.619671,-0.629949,0.820614,0.429635,-1.035593,1.193385,-0.442972,-1.025719,1.275537,-0.521072,1.168421,0.546298,-1.213385,-1.509718,-0.540204,1.086244,-0.156711,0.496326,0.929717,0.074468,0.320166,-0.454683,-0.548404,-0.829524,-1.314232,0.932095,-1.249724,-0.482459,0.398590,-0.181341,-0.948005,0.475959,-0.115481,0.974328,0.283892,-1.030133,0.911857,-0.659861,0.326998,0.274540,-1.280858,1.188591,-0.542040,0.665619,-0.911602,-0.104983,-0.598708,-0.123677,0.274629,-0.667453,-0.492723,-0.728863,0.538150,0.618266,0.620238,0.178953,-0.923863,0.627808,0.658760,0.722092,-0.459313,0.611219,0.141023,0.302998,-0.047780,0.147517,-0.803917,0.153953,-0.221812,0.375314,-0.948659,0.267570,-0.044639,-0.033859,-0.188432,0.220568,-0.401021,0.242154,-0.215860,0.273337,-0.379821,0.301146,-0.033858,-0.483569,0.117891,0.248625,0.237307,0.899781,0.199734,-0.009414,0.081028,-0.104647,-1.415107,0.082784,-1.938045]
		es_theta=[0.457187,-0.512200,-0.327178,0.450437,-0.231178,0.170766,-0.308778,-0.434071,-0.408753,0.373746,-0.502079,1.142305,-0.464765,-0.259665,0.474906,0.282021,0.539224,0.409012,-0.367887,-0.675586,-0.530512,-0.292329,0.825457,-0.006559,-0.190782,-0.019137,-0.887815,0.660487,0.709652,0.876960,-0.512601,-0.436593,0.023595,-1.316017,-0.685499,0.202839,0.372563,0.203863,0.052187,-0.415038,-0.346507,0.440832,-0.237421,0.045034,-0.635850,-0.122292,-0.358967,-0.968372,0.064544,0.149143,0.782838,0.002067,-0.745279,0.662741,-0.337022,-0.237673,-0.228223,0.741287,0.768720,0.980846,0.162918,-0.111503,0.200625,0.166209,-0.211950,-0.473176,0.302092,0.345100,0.359451,0.356902,1.050516,-0.503891,0.215891,0.332873,-0.180617,-0.347886,-0.159902,0.328798,0.016252,-0.465663,-0.065939,-0.267875,0.386807,0.178804,0.092828,0.017902,0.973292,-1.031274,0.372694,0.244114,0.425030,-0.231707,0.337331,0.707266,0.514923,-0.558983,0.813091,-0.414390,0.877179,0.611118,0.139720,-0.293354,-0.049373,-0.651006,0.344027,0.550063,-0.467034,0.372645,0.274217,-0.579712,-0.739606,0.694593,-0.912510,-1.108848,0.254948,-0.361745,-0.704881,-0.768703,-0.146462,-0.226491,0.878684,0.476104,-0.672822,0.691236,0.170203,-0.528117,-0.155112,0.235323,0.260138,1.095572,-0.480523,0.347338,0.860147,-0.540596,0.096352,-0.743211,-0.518757,0.327351,0.577654,0.827854,-0.127357,0.533887,0.319123,-0.863000,0.708985,0.158485,-0.661371,0.578522,0.031197,-0.421970,0.784028,-0.239462,0.490181,0.329888,0.930786,0.199488,0.508309,0.175775,-0.449404,-0.680685,-0.516440,0.774044,0.956821,0.872627,-0.416815,0.683343,-0.610358,0.661984,0.434418,-0.417364,0.549175,0.807836,0.191420,0.109273,-0.332200,0.345393,0.447195,-0.822028,0.469580,-0.620891,-0.805917,0.270909,-0.398989,0.324957,-0.737958,0.831687,-0.032839,-0.053245,-0.480338,0.585772,0.262994,0.766219,-0.014478,-0.319877,0.003730,-0.572157,-0.358277,0.269093,-0.606766,-0.257378,1.332708,-1.753353,1.290562,-0.750555,0.895634,0.674262,-2.105964,-0.719499,-1.780297,-1.355608,-0.749924,1.280699,0.760830,-1.243399,0.454231,0.789606,-0.095526,-1.084301,-0.986808,-1.741496,-0.248735,1.642545,-0.554725,-0.866958,-0.325155,1.589580,-1.098013,-1.447977,-0.008122,0.401039,0.600671,-0.396730,0.348043,-2.573318,-0.603427,-1.092705]
		pid=es_theta[0:199]
		pexp=es_theta[199:228]
		pm=es_theta[228:236]
		net.blobs['gt_theta'].data[0,:] = gt_theta
		net.blobs['pid'].data[0,:] = pid
		net.blobs['pexp'].data[0,:] = pexp
		net.blobs['pm'].data[0,:] = pm
		loss = net.forward()['loss'][0,0,0,:]
		print loss

